generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(100)
  email       String       @unique @db.VarChar(255)
  googleUid   String?      @unique @db.VarChar(255)
  password    String?      @db.VarChar(255)
  createdAt   DateTime     @default(now())
  cvs         CV[]
  jobPostings JobPosting[]
  profile     UserProfile?
}

model CV {
  id         String       @id @default(cuid())
  userId     String
  fileUrl    String
  parsedText Json?
  isLatest   Boolean      @default(false)
  createdAt  DateTime     @default(now())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  matches    CVJobMatch[]
}

model JobPosting {
  id               String       @id @default(cuid())
  userId           String
  url              String?
  title            String       @db.VarChar(255)
  companyName      String       @db.VarChar(255)
  description      String?
  requirements     String?
  credibilityScore Float?
  redFlags         Json?
  createdAt        DateTime     @default(now())
  matches          CVJobMatch[]
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CVJobMatch {
  id              String     @id @default(cuid())
  cvId            String
  jobPostingId    String
  matchingScore   Float
  analysisSummary Json?
  createdAt       DateTime   @default(now())
  cv              CV         @relation(fields: [cvId], references: [id], onDelete: Cascade)
  jobPosting      JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  feedback        Feedback?

  @@unique([cvId, jobPostingId])
}

model Feedback {
  id               String     @id @default(cuid())
  cvJobMatchId     String     @unique
  suggestions      Json?
  highlightedAreas Json?
  createdAt        DateTime   @default(now())
  cvJobMatch       CVJobMatch @relation(fields: [cvJobMatchId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  currentPosition   String?   @db.VarChar(255)
  preferredPosition String?   @db.VarChar(255)
  dob               DateTime?
  createdAt         DateTime  @default(now())
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
