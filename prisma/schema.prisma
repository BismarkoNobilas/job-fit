generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(cuid())
  name       String       @db.VarChar(100)
  email      String       @unique @db.VarChar(255)
  googleUid  String?      @unique @db.VarChar(255)
  password   String?      @db.VarChar(255)
  createdAt  DateTime     @default(now())
  cvs        CV[]
  jobOpening JobOpening[]
  profile    UserProfile?
}

model CV {
  id         String       @id @default(cuid())
  userId     String
  fileUrl    String
  parsedText Json?
  isLatest   Boolean      @default(false)
  createdAt  DateTime     @default(now())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  matches    CVJobMatch[]
}

model JobOpening {
  id               String       @id @default(cuid())
  userId           String?
  companyName      String?      @db.VarChar(255)
  companyLocation  String?      @db.VarChar(255)
  jobTitle         String?      @db.VarChar(255)
  salaryEstimation String?      @db.VarChar(255)
  contractType     String?      @db.VarChar(255)
  workArrangement  String?      @db.VarChar(255)
  jobDescription   String[]
  jobRequirements  String[]
  credibilityLabel String       @db.VarChar(255)
  credibilityScore Float
  createdAt        DateTime     @default(now())
  reasoningPoint   String[]
  matches          CVJobMatch[]
  user             User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CVJobMatch {
  id              String     @id @default(cuid())
  cvId            String
  jobPostingId    String
  matchingScore   Float
  analysisSummary Json?
  createdAt       DateTime   @default(now())
  cv              CV         @relation(fields: [cvId], references: [id], onDelete: Cascade)
  jobOpening      JobOpening @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  feedback        Feedback?

  @@unique([cvId, jobPostingId])
}

model Feedback {
  id               String     @id @default(cuid())
  cvJobMatchId     String     @unique
  suggestions      Json?
  highlightedAreas Json?
  createdAt        DateTime   @default(now())
  cvJobMatch       CVJobMatch @relation(fields: [cvJobMatchId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  currentPosition   String?   @db.VarChar(255)
  preferredPosition String?   @db.VarChar(255)
  dob               DateTime?
  createdAt         DateTime  @default(now())
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
